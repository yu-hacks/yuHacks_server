import { Types } from 'mongoose';
export declare type Id = '_id';
export declare type VerOption = 'versionKey';
export declare type VerKey = '__v';
export declare type Timestamps = 'timestamps';
export declare type CreatedAt = 'createdAt';
export declare type UpdatedAt = 'updatedAt';
export declare type Required = 'required';
export declare type Select = 'select';
export declare type Enum = 'enum';
export interface SubDocumentNoId extends Omit<Types.Subdocument, Id> {
}
export interface SubDocument extends Types.Subdocument {
}
export interface SubDocumentArray<T extends SubDocument> extends Types.DocumentArray<T> {
    filter(callbackfn: (value: T, index: number, array: SubDocumentArray<T>) => unknown, thisArg?: any): SubDocumentArray<T>;
}
export interface SubDocumentArrayNoId<T extends SubDocumentNoId> extends Types.Array<T> {
    create(obj: any): T;
    inspect(): T[];
    toObject(options?: any): T[];
    filter(callbackfn: (value: T, index: number, array: SubDocumentArrayNoId<T>) => unknown, thisArg?: any): SubDocumentArrayNoId<T>;
}
