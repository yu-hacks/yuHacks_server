import { Types } from 'mongoose';
import { CreatedAt, Id, Timestamps, UpdatedAt, VerKey, VerOption } from './_shared';
declare type IsNever<T, IS, NOT> = 0 extends (1 & T) ? NOT : T extends never ? IS : NOT;
export declare type OptionalField = 'notRequired';
export declare type Optional<T> = Record<OptionalField, T>;
declare type OptionalKeys<T> = {
    [K in keyof T]: T[K] extends Record<OptionalField, any> ? Record<OptionalField, any> extends T[K] ? K : never : never;
}[keyof T];
declare type RequiredKeys<T> = {
    [K in keyof T]: IsNever<T[K], never, T[K] extends Record<OptionalField, any> ? Record<OptionalField, any> extends T[K] ? never : K : K>;
}[keyof T];
export declare type Convert<T> = {
    [P in RequiredKeys<T>]: T[P];
} & {
    [P in OptionalKeys<T>]?: T[P] extends Record<OptionalField, infer O> ? Record<OptionalField, any> extends T[P] ? (O | undefined) : never : never;
};
export declare type OptionIdDisabled = Record<Id, false>;
export declare type OptionIdAsDefault = Record<Id, Types.ObjectId>;
declare type OptionVerDisabled = Record<VerOption, false>;
declare type OptionVerString = Record<VerOption, Readonly<string>>;
declare type OptionVerAsDefault = Record<VerKey, number>;
/**
 * Add numbers!
 */
declare type OptionVerAsCustom<Opts extends OptionVerString> = Record<Opts[VerOption], number>;
declare type TimestampsEnabled = Record<Timestamps, true>;
declare type TimestampsEnabledEach = TimestampEnabled<CreatedAt> & TimestampEnabled<UpdatedAt>;
declare type TimestampEnabled<U extends string> = Record<Timestamps, Record<U, true>>;
declare type TimestampString<U extends string> = Record<Timestamps, Record<U, Readonly<string>>>;
declare type TimestampAsDefault<U extends string> = Record<U, Date>;
declare type TimestampAsCustom<U extends string, Opts extends TimestampString<U>> = Record<Opts[Timestamps][U], Date>;
declare type GetSchemaId<Opts> = Opts extends OptionIdDisabled ? {} : OptionIdAsDefault;
declare type GetSchemaVer<Opts> = Opts extends OptionVerDisabled ? {} : Opts extends OptionVerString ? OptionVerAsCustom<Opts> : OptionVerAsDefault;
declare type GetSchemaTimestamp<U extends string, Opts> = Opts extends (TimestampsEnabled | TimestampsEnabledEach | TimestampEnabled<U>) ? TimestampAsDefault<U> : Opts extends TimestampString<U> ? TimestampAsCustom<U, Opts> : {};
export declare type DefinitionField = 'definition';
export declare type Definition = Record<DefinitionField, any>;
export declare type GetSchemaType<Opts, T> = GetSchemaId<Opts> & Convert<T> & GetSchemaTimestamp<CreatedAt, Opts> & GetSchemaTimestamp<UpdatedAt, Opts> & GetSchemaVer<Opts>;
export {};
