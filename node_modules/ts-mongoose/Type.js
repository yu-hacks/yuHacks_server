"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongoose_1 = require("mongoose");
var createType = function (type) { return function (options) {
    return (__assign(__assign({}, (options ? options : {})), { type: type }));
}; };
exports.Type = {
    number: createType(Number),
    boolean: createType(Boolean),
    date: createType(Date),
    mixed: createType(mongoose_1.Schema.Types.Mixed),
    objectId: createType(mongoose_1.Schema.Types.ObjectId),
    string: createType(String),
    decimal128: createType(mongoose_1.Schema.Types.Decimal128),
    buffer: createType(mongoose_1.Schema.Types.Buffer),
    object: function (options) { return ({
        of: function (schema) {
            return __assign(__assign({}, (options ? options : {})), { type: schema });
        },
    }); },
    array: function (options) { return ({
        of: function (schema) {
            return __assign(__assign({}, (options ? options : {})), { type: [schema] });
        },
    }); },
    schema: function (options) { return ({
        of: function (schema) {
            return __assign(__assign({}, (options ? options : {})), { type: schema });
        },
    }); },
    ref: function (schema) { return ({
        to: function (name, refSchema) {
            return __assign(__assign({}, schema), { ref: name });
        },
    }); },
};
