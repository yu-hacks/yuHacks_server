import { Types } from 'mongoose';
declare type ExcludeBaseType<T> = Exclude<T, string | number | Types.ObjectId>;
declare type ExcludeFromArray<T> = T extends Array<infer U> ? Array<ExcludeBaseType<U>> : ExcludeBaseType<T>;
declare type PopulateItem<T, P extends keyof T> = Omit<T, P> & {
    [x in P]: ExcludeFromArray<T[x]>;
};
export declare type MaybeItem<T> = T extends Array<infer U> ? U : T;
export declare type Populate<T, P> = T extends Array<infer U> ? P extends keyof U ? Array<PopulateItem<U, P>> : T : P extends keyof T ? PopulateItem<T, P> : T;
export {};
